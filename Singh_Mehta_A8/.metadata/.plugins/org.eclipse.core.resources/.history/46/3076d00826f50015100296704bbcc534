package com.socket.node;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;


public class WebServer {
	ServerSocket server;

	public void listenSocket(){

		try{
			server = new ServerSocket(10000);
		} catch (IOException e) {
			System.out.println("Could not listen on port 10000");
			System.exit(-1);
		}
		while(true){
			ClientWorker w;
			try{
				//server.accept returns a client connection
				w = new ClientWorker(server.accept());
				Thread t = new Thread(w);
				t.start();
			} catch (IOException e) {
				System.out.println("Accept failed: 10000");
				System.exit(-1);
			}
		}
	}

	class ClientWorker implements Runnable {
		private Socket client;
		//  private JTextArea textArea;

		//Constructor
		ClientWorker(Socket client) {
			this.client = client;
			// this.textArea = textArea;
		}

		public void run(){
			String line;
			BufferedReader in = null;
			BufferedWriter out = null;
			try{
				in = new BufferedReader(new 
						InputStreamReader(client.getInputStream(), "UTF-8"));
				out = new 
						BufferedWriter(new OutputStreamWriter(client.getOutputStream(), "UTF-8"));
			} catch (IOException e) {
				System.out.println("in or out failed");
				System.exit(-1);
			}

			while(true){
				try{
					line = in.readLine();
					//Send data back to client
					out.write(line);
					//Append data to text area
					//textArea.append(line);
				}catch (IOException e) {
					System.out.println("Read failed");
					System.exit(-1);
				}
			}
		}
	}

	protected void finalize(){
		//Objects created in run method are finalized when
		//program terminates and thread exits
		try{
			server.close();
		} catch (IOException e) {
			System.out.println("Could not close socket");
			System.exit(-1);
		}
	}
}
